% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pam.metrics_summary.R
\name{pam.metrics_summary}
\alias{pam.metrics_summary}
\title{Performance Metrics for Survival Analysis Models}
\usage{
pam.metrics_summary(
  data,
  time_var,
  status_var,
  covariates,
  model = "all",
  metrics = "all"
)
}
\arguments{
\item{data}{A data frame containing the survival data.}

\item{time_var}{The name of the time variable in `data` indicating survival time.}

\item{status_var}{The name of the status variable in `data` indicating event occurrence.}

\item{covariates}{A character vector of covariate names to include in the model.}

\item{model}{A character string or vector specifying the model types to fit (e.g., "coxph", "exp", "lognormal", "weibull"). Default is "all" to fit all models.}

\item{metrics}{A character string or vector specifying the metrics to compute. Default is "all" to compute all available metrics.}
}
\value{
A data frame containing the selected model's performance metrics.
}
\description{
This function computes a comprehensive set of performance metrics for survival analysis models. It provides metrics such as R_square, L_square, Pseudo_R, Harrell’s C, Uno’s C, R_sph (distance-based estimator for survival predictive accuracy), R_sh, Brier Score, and Time-dependent AUC. Users can specify particular metrics and model types, enabling tailored performance evaluation for various survival models.
}
\examples{
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)

Use Mayo Clinic Primary Biliary Cirrhosis Data
data(pbc)
pbc <- pbc \%>\% 
  filter(is.na(trt)==F) \%>\% 
mutate(log_albumin = log(albumin),
       log_bili = log(bili),
       log_protime = log(protime),
       status = ifelse(status==2, 1, 0))
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
Call the function with all metrics and all models
results <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates)
results2 <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates, model = c("lognormal", "weibull"),  metrics = c("R_square", "L_square", "Brier Score"))
}
