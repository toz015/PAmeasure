seurat_obj2 <- FindNeighbors(seurat_obj2, dims = 1:15, verbose = FALSE)
seurat_obj2 <- FindClusters(seurat_obj2, resolution = 0.5, verbose = FALSE)
DimPlot(seurat_obj2, label = TRUE)
# Find marker genes for each cluster
markers2 <- FindAllMarkers(seurat_obj2, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_markers2 <- markers2 %>%
group_by(cluster) %>%
slice_max(n = 4, order_by = avg_log2FC)
gene_symbols2 <- unique(top_markers2$gene)
ensembl_id2 <- getBM(
attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = gene_symbols2,
mart = ensembl
)
top_markers2 <- top_markers2 %>%
inner_join(ensembl_id2, by = c("gene" = "ensembl_gene_id"))
df2 <- top_markers2 %>%
group_by(cluster) %>%
summarize(hgnc_symbol_list = paste(hgnc_symbol, collapse = ", "))
# Display the resulting data frame
print(df2)
cluster_to_cell_type2 <- c(
"0" = "Dendritic cell",
"1" = "Regulatory T cell",
"2" = "Classical monocytes",
"3" = "Memory B cell",
"4" = "Neutrophils",
"5" = "CD8 T cells",
"6" = "Neutrophils",
"7" = "Neurons",
"8" = "Dendritic cell",
"9" = "Plasma cells",
"10" = "Hematopoietic stem cell"
)
seurat_obj2@meta.data$cell_type <- cluster_to_cell_type2[as.character(seurat_obj2@meta.data$seurat_clusters)]
DimPlot(seurat_obj2, group.by = "cell_type", label = TRUE)
pancreas <- readRDS("/Users/wanghd/Desktop/UCLA/Biostat/stat254/project/Pancreas.rds")
pancreas_obj <- CreateSeuratObject(counts = pancreas,  min.cells = 3, min.features = 200, project = "pancreas")
VlnPlot(pancreas_obj, features = c("nFeature_RNA", "nCount_RNA"), ncol = 2)
pancreas_obj  <- NormalizeData(pancreas_obj , normalization.method = "LogNormalize", scale.factor = 10000)
pancreas_obj  <- FindVariableFeatures(pancreas_obj , selection.method = "vst", nfeatures = 2000)
pancreas_obj  <- ScaleData(pancreas_obj )
pancreas_obj  <- RunPCA(pancreas_obj , npcs = 50)
elbow_plot <- ElbowPlot(pancreas_obj , ndims = 50)
print(elbow_plot)
pancreas_obj <- RunPCA(pancreas_obj, npcs = 15, verbose = FALSE)
pancreas_obj <- RunUMAP(pancreas_obj, reduction = "pca", dims = 1:15, n.neighbors = 30, min.dist = 0.3, verbose = FALSE)
pancreas_obj <- FindNeighbors(pancreas_obj, dims = 1:15, verbose = FALSE)
pancreas_obj <- FindClusters(pancreas_obj, resolution = 0.5, verbose = FALSE)
DimPlot(pancreas_obj, label = TRUE)
markers3 <- FindAllMarkers(pancreas_obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_markers3 <- markers3 %>%
group_by(cluster) %>%
slice_max(n = 4, order_by = avg_log2FC)
#Ensembl IDs for the PP cell markers
pp_markers <- c("ENSG00000108849", "ENSG00000124762") # PPY and SOX4
pp_rows <- markers3[markers3$gene %in% pp_markers, ]
if (nrow(pp_rows) > 0) {
print("Rows corresponding to PP cell markers:")
print(pp_rows)
} else {
print("No rows found for PP cell markers in markers3.")
}
alpha_markers <- c("ENSG00000115263", "ENSG00000187522", "ENSG00000163631")
alpha_rows <- markers3[markers3$gene %in% alpha_markers, ]
if (nrow(alpha_rows) > 0) {
print("Rows corresponding to Alpha cell markers:")
print(alpha_rows)
} else {
print("No rows found for Alpha cell markers in markers3.")
}
gene_symbols3 <- unique(top_markers3$gene)
ensembl_id3 <- getBM(
attributes = c("ensembl_gene_id", "hgnc_symbol"),
filters = "ensembl_gene_id",
values = gene_symbols3,
mart = ensembl
)
top_markers3 <- top_markers3 %>%
inner_join(ensembl_id3, by = c("gene" = "ensembl_gene_id"))
df3 <- top_markers3 %>%
group_by(cluster) %>%
summarize(hgnc_symbol_list = paste(hgnc_symbol, collapse = ", "))
# Display the resulting data frame
print(df3)
cluster_to_cell_type3 <- c(
"0" = "Pancreatic cell",
"1" = "Hepatocytes",
"2" = "Plasma cell",
"3" = "Epithelial cell",
"4" = "Intestinal epithelial cell",
"5" = "Ductal cell",
"6" = "Enteroendocrine cell",
"7" = "Endothelial cell",
"8" = "Pancreatic cell",
"9" = "Stromal cell"
)
pancreas_obj@meta.data$cell_type <- cluster_to_cell_type2[as.character(pancreas_obj@meta.data$seurat_clusters)]
DimPlot(pancreas_obj, group.by = "cell_type", label = TRUE)
cluster_to_cell_PPA <- c(
"ENSG00000108849" = "PP",
"ENSG00000124762" = "PP",
"ENSG00000115263" = "alpha",
"ENSG00000187522" = "alpha",
"ENSG00000163631" = "alpha"
)
pancreas_obj@meta.data$cell_type_2 <- NA
for (gene in names(cluster_to_cell_PPA)) {
if (gene %in% rownames(pancreas_obj@assays$RNA)) {
gene_expression <- pancreas_obj@assays$RNA$counts[gene, ]
if (any(gene_expression > 0)) {
cells_expressing_gene <- gene_expression > 0
pancreas_obj@meta.data$cell_type_2[cells_expressing_gene] <- cluster_to_cell_PPA[gene]
} else {
warning(paste("Gene", gene, "is not expressed in any cells."))
}
} else {
warning(paste("Gene", gene, "is not found in the Seurat object."))
}
}
DimPlot(pancreas_obj, group.by = "cell_type_2", label = TRUE)
saveRDS(seurat_obj1, file = "BoneMarrow1_obj_updated.rds")
saveRDS(seurat_obj2, file = "BoneMarrow2_obj_updated.rds")
saveRDS(pancreas_obj, file = "pancreas_obj_updated.rds")
knitr::opts_chunk$set(echo = TRUE)
coxph_predicted_prob <- function(fit.cox, covariates, time_var, status_var, tau = NULL, newdata = NULL, predict = T)
coxph_predicted_prob <- pam.coxph_restricted(fit.cox, covariates, time_var, status_var, tau = NULL, newdata = NULL, predict = T)
coxph_predicted_prob <- pam.coxph_restricted(fit.cox, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
coxph_predicted_prob <- pam.coxph_restricted(fit.cox, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
coxph_predicted_prob <- pam.coxph_restricted(fit.cox, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(riskCommunicator)
library(PAmeasures)
library(dplyr)
set.seed(1234)
df <- framingham %>% filter(PERIOD==1) %>%
select(DEATH, TIMEDTH, HYPERTEN, TIMEHYP, RANDID, SEX:educ) %>%
group_by(RANDID) %>%
mutate(time = min(TIMEDTH, TIMEHYP),
status = ifelse(time==TIMEDTH, DEATH*2, HYPERTEN),
status = ifelse(status == 1, 1, 0)) %>% #
select(time, status, everything()) %>%
filter(time!=0) %>% ungroup() %>%
select(time, status, SEX:educ, -BPMEDS) %>% na.omit()
X <- df %>% select(SEX:educ)
df$status %>% table
# split train and test data
sample_index <- sample(1:dim(df)[1], round(2/3*dim(df)[1]), replace = F)
train_y <- df[sample_index, ] %>% select(time, status)
train_x <- X[sample_index, ]
test_y <- df[-sample_index, ] %>% select(time, status)
test_x <- X[-sample_index, ]
tau <- quantile(df$time[sample_index], 0.5)
#time <- "time"
#status <- "status"
column_names <- colnames(df)
covariates <-column_names[-(1:2)]
column_names <- colnames(df)
length(column_names)
time_var <- "time"
status_var <- "status"
covariates <-column_names[-(1:2)]
length(covariates)
# fit models
formula_text <- paste(
"Surv(", time_var, ", ", status_var, ") ~ ",
paste(covariates, collapse = " + "),
sep = ""
)
# Convert to formula
formula <- as.formula(formula_text)
train_data = df[sample_index,]
fit.coxph.full <- survival::coxph(formula, data = train_data, x = TRUE, y = TRUE)
train_data <- df[sample_index,]
results_temp <- pam.survival_eval(train_data = train_data, predicted_data = train_data, covariates = covariates, tau = 1e10)
results_temp
coxph_predicted_prob <- pam.coxph_restricted(fit.cox, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
fit.coxph.full <- coxph(Surv(time, status) ~ ., data = train_data,
x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ ., data = train_data,
dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ ., data = train_data,
dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ ., data = train_data,
dist="weibull", x=TRUE, y=TRUE)
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
coxph_predicted_prob
exp_predicted_prob <- pam.surverg_restricted(fit.exp, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
exp_predicted_prob <- pam.surverg_restricted(fit.lognormal, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
exp_predicted_prob <- pam.surverg_restricted(fit.lognormal, covariates, "time", "status", tau = NULL, newdata = NULL, predict = T)
exp_predicted_prob <- pam.surverg_restricted(fit.lognormal, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
exp_predicted_prob <- pam.surverg_restricted(fit.lognormal, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
exp_predicted_prob
exp_predicted_prob <- pam.surverg_restricted(fit.exp, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
exp_predicted_prob
exp_predicted_prob <- pam.surverg_restricted(fit.exp, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
exp_predicted_prob
exp_predicted_prob <- pam.surverg_restricted(fit.exp, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
exp_predicted_prob <- pam.surverg_restricted(fit.exp, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
lognorm_predicted_prob <- pam.surverg_restricted(fit.lognormal, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
weibull_predicted_prob <- pam.surverg_restricted(fit.weibull, covariates, "time", "status", tau = 1e10, newdata = NULL, predict = T)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(riskCommunicator)
library(PAmeasures)
library(dplyr)
set.seed(1234)
df <- framingham %>% filter(PERIOD==1) %>%
select(DEATH, TIMEDTH, HYPERTEN, TIMEHYP, RANDID, SEX:educ) %>%
group_by(RANDID) %>%
mutate(time = min(TIMEDTH, TIMEHYP),
status = ifelse(time==TIMEDTH, DEATH*2, HYPERTEN),
status = ifelse(status == 1, 1, 0)) %>% #
select(time, status, everything()) %>%
filter(time!=0) %>% ungroup() %>%
select(time, status, SEX:educ, -BPMEDS) %>% na.omit()
X <- df %>% select(SEX:educ)
df$status %>% table
# split train and test data
sample_index <- sample(1:dim(df)[1], round(2/3*dim(df)[1]), replace = F)
train_y <- df[sample_index, ] %>% select(time, status)
train_x <- X[sample_index, ]
test_y <- df[-sample_index, ] %>% select(time, status)
test_x <- X[-sample_index, ]
tau <- quantile(df$time[sample_index], 0.5)
#time <- "time"
#status <- "status"
column_names <- colnames(df)
covariates <-column_names[-(1:2)]
column_names <- colnames(df)
length(column_names)
time_var <- "time"
status_var <- "status"
covariates <-column_names[-(1:2)]
length(covariates)
# fit models
formula_text <- paste(
"Surv(", time_var, ", ", status_var, ") ~ ",
paste(covariates, collapse = " + "),
sep = ""
)
# Convert to formula
formula <- as.formula(formula_text)
train_data = df[sample_index,]
fit.coxph.full <- survival::coxph(formula, data = train_data, x = TRUE, y = TRUE)
train_data <- df[sample_index,]
results_temp <- pam.survival_eval(train_data = train_data, predicted_data = train_data, covariates = covariates, tau = 1e10)
results_temp
results_all <- pam.survival_eval(train_data = train_data, predicted_data = train_data, covariates = covariates, tau = 1e10, metrics = "all", model = "all")
fit.coxph.full <- coxph(Surv(time, status) ~ ., data = train_data,
x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ ., data = train_data,
dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ ., data = train_data,
dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ ., data = train_data,
dist="weibull", x=TRUE, y=TRUE)
pam.prediction_survial_eval(object = fit.coxph.full, train_data = train_data, predicted_data = train_data, covariates = covariates, metrics = "all", tau = 1e10)
knitr::opts_chunk$set(echo = TRUE)
pam.predicted_survial_eval(fit.coxph.full, coxph_predicted_prob, status,
metrics = "all",  t_star = NULL, tau = NULL)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(riskCommunicator)
library(PAmeasures)
library(dplyr)
set.seed(1234)
df <- framingham %>% filter(PERIOD==1) %>%
select(DEATH, TIMEDTH, HYPERTEN, TIMEHYP, RANDID, SEX:educ) %>%
group_by(RANDID) %>%
mutate(time = min(TIMEDTH, TIMEHYP),
status = ifelse(time==TIMEDTH, DEATH*2, HYPERTEN),
status = ifelse(status == 1, 1, 0)) %>% #
select(time, status, everything()) %>%
filter(time!=0) %>% ungroup() %>%
select(time, status, SEX:educ, -BPMEDS) %>% na.omit()
X <- df %>% select(SEX:educ)
df$status %>% table
# split train and test data
sample_index <- sample(1:dim(df)[1], round(2/3*dim(df)[1]), replace = F)
train_y <- df[sample_index, ] %>% select(time, status)
train_x <- X[sample_index, ]
test_y <- df[-sample_index, ] %>% select(time, status)
test_x <- X[-sample_index, ]
tau <- quantile(df$time[sample_index], 0.5)
#time <- "time"
#status <- "status"
column_names <- colnames(df)
covariates <-column_names[-(1:2)]
column_names <- colnames(df)
length(column_names)
time_var <- "time"
status_var <- "status"
covariates <-column_names[-(1:2)]
length(covariates)
# fit models
formula_text <- paste(
"Surv(", time_var, ", ", status_var, ") ~ ",
paste(covariates, collapse = " + "),
sep = ""
)
# Convert to formula
formula <- as.formula(formula_text)
train_data = df[sample_index,]
fit.coxph.full <- survival::coxph(formula, data = train_data, x = TRUE, y = TRUE)
train_data <- df[sample_index,]
#results_temp <- pam.survival_eval(train_data = train_data, predicted_data = train_data, covariates = covariates, tau = 1e10)
#results_temp
fit.coxph.full <- coxph(Surv(time, status) ~ ., data = train_data,
x=TRUE,y=TRUE)
rm(list = ls())
library(riskCommunicator)
library(PAmeasures)
library(dplyr)
library(survival)
set.seed(1234)
df <- framingham %>% filter(PERIOD==1) %>%
select(DEATH, TIMEDTH, HYPERTEN, TIMEHYP, RANDID, SEX:educ) %>%
group_by(RANDID) %>%
mutate(time = min(TIMEDTH, TIMEHYP),
status = ifelse(time==TIMEDTH, DEATH*2, HYPERTEN),
status = ifelse(status == 1, 1, 0)) %>% #
select(time, status, everything()) %>%
filter(time!=0) %>% ungroup() %>%
select(time, status, SEX:educ, -BPMEDS) %>% na.omit()
X <- df %>% select(SEX:educ)
df$status %>% table
# split train and test data
sample_index <- sample(1:dim(df)[1], round(2/3*dim(df)[1]), replace = F)
train_y <- df[sample_index, ] %>% select(time, status)
train_x <- X[sample_index, ]
test_y <- df[-sample_index, ] %>% select(time, status)
test_x <- X[-sample_index, ]
tau <- quantile(df$time[sample_index], 0.5)
#time <- "time"
#status <- "status"
column_names <- colnames(df)
covariates <-column_names[-(1:2)]
column_names <- colnames(df)
length(column_names)
time_var <- "time"
status_var <- "status"
covariates <-column_names[-(1:2)]
length(covariates)
# fit models
formula_text <- paste(
"Surv(", time_var, ", ", status_var, ") ~ ",
paste(covariates, collapse = " + "),
sep = ""
)
# Convert to formula
formula <- as.formula(formula_text)
train_data = df[sample_index,]
fit.coxph.full <- survival::coxph(formula, data = train_data, x = TRUE, y = TRUE)
train_data <- df[sample_index,]
#results_temp <- pam.survival_eval(train_data = train_data, predicted_data = train_data, covariates = covariates, tau = 1e10)
#results_temp
fit.coxph.full <- coxph(Surv(time, status) ~ ., data = train_data,
x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ ., data = train_data,
dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ ., data = train_data,
dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ ., data = train_data,
dist="weibull", x=TRUE, y=TRUE)
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
coxph_predicted_prob
pam.predicted_survial_eval(fit.coxph.full, coxph_predicted_prob, status,
metrics = "all",  t_star = NULL, tau = NULL)
pam.predicted_survial_eval(fit.coxph.full, coxph_predicted_prob, status,
metrics = "all",  t_star = NULL, tau = NULL)
exp_predicted_prob <- pam.surverg_restricted(fit.exp, covariates, tau = 1e10, newdata = NULL, predict = T)
lognorm_predicted_prob <- pam.surverg_restricted(fit.lognormal, covariates, tau = 1e10, newdata = NULL, predict = T)
weibull_predicted_prob <- pam.surverg_restricted(fit.weibull, covariates, tau = 1e10, newdata = NULL, predict = T)
pam.predicted_survial_eval(event_time = test_y$obs.times, coxph_predicted_prob , status = test_y$obs.event,,
metrics = "all",  t_star = NULL, tau = NULL)
setwd("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
devtools::document()
.rs.restartR()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(riskCommunicator)
library(PAmeasures)
library(dplyr)
library(survival)
set.seed(1234)
df <- framingham %>% filter(PERIOD==1) %>%
select(DEATH, TIMEDTH, HYPERTEN, TIMEHYP, RANDID, SEX:educ) %>%
group_by(RANDID) %>%
mutate(time = min(TIMEDTH, TIMEHYP),
status = ifelse(time==TIMEDTH, DEATH*2, HYPERTEN),
status = ifelse(status == 1, 1, 0)) %>% #
select(time, status, everything()) %>%
filter(time!=0) %>% ungroup() %>%
select(time, status, SEX:educ, -BPMEDS) %>% na.omit()
X <- df %>% select(SEX:educ)
df$status %>% table
# split train and test data
sample_index <- sample(1:dim(df)[1], round(2/3*dim(df)[1]), replace = F)
train_y <- df[sample_index, ] %>% select(time, status)
train_x <- X[sample_index, ]
test_y <- df[-sample_index, ] %>% select(time, status)
test_x <- X[-sample_index, ]
tau <- quantile(df$time[sample_index], 0.5)
#time <- "time"
#status <- "status"
column_names <- colnames(df)
covariates <-column_names[-(1:2)]
column_names <- colnames(df)
length(column_names)
time_var <- "time"
status_var <- "status"
covariates <-column_names[-(1:2)]
length(covariates)
# fit models
formula_text <- paste(
"Surv(", time_var, ", ", status_var, ") ~ ",
paste(covariates, collapse = " + "),
sep = ""
)
# Convert to formula
formula <- as.formula(formula_text)
train_data = df[sample_index,]
fit.coxph.full <- survival::coxph(formula, data = train_data, x = TRUE, y = TRUE)
train_data <- df[sample_index,]
#results_temp <- pam.survival_eval(train_data = train_data, predicted_data = train_data, covariates = covariates, tau = 1e10)
#results_temp
fit.coxph.full <- coxph(Surv(time, status) ~ ., data = train_data,
x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ ., data = train_data,
dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ ., data = train_data,
dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ ., data = train_data,
dist="weibull", x=TRUE, y=TRUE)
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
coxph_predicted_prob
pam.predicted_survial_eval(event_time = test_y$obs.times, coxph_predicted_prob , status = test_y$obs.event,,
metrics = "all",  t_star = NULL, tau = NULL)
pam.predicted_survial_eval(event_time = test_y$obs.times, coxph_predicted_prob , status = test_y$obs.event,
metrics = "all",  t_star = NULL, tau = NULL)
pam.predicted_survial_eval(event_time = train_data$time, coxph_predicted_prob , status = train_data$status,
metrics = "all",  t_star = NULL, tau = NULL)
pam.predicted_survival_eval(
event_time = train_data$time,  # actual event times
predicted_prob = coxph_predicted_prob,  # predicted probabilities
status = train_data$status,
metrics = "all",
t_star = NULL,
tau = NULL
)
pam.predicted_survival_eval(
event_time = train_data$time,  # actual event times
predicted_prob = coxph_predicted_prob,  # predicted probabilities
status = train_data$status,
metrics = "all",
t_star = NULL,
tau = 1e10
)
pam.predicted_survial_eval(
event_time = train_data$time,  # actual event times
predicted_prob = coxph_predicted_prob,  # predicted probabilities
status = train_data$status,
metrics = "all",
t_star = NULL,
tau = 1e10
)
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
pam.predicted_survial_eval(event_time = fit.coxph.full, coxph_predicted_prob, status = train_data$status,
metrics = "all", t_star = NULL, tau = NULL)
print(length(coxph_predicted_prob))
print(train_data$time)
print(length(coxph_predicted_prob$pred))
print(train_data$time)
print(length(coxph_predicted_prob$pred))
print(length(train_data$time))
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
pam.predicted_survial_eval(event_time = coxph_predicted_prob$obs, coxph_predicted_prob$pred, status = coxph_predicted_prob$status,
metrics = "all", t_star = NULL, tau = NULL)
exp_predicted_prob <- pam.surverg_restricted(fit.exp, covariates, tau = 1e10, newdata = NULL, predict = T)
lognorm_predicted_prob <- pam.surverg_restricted(fit.lognormal, covariates, tau = 1e10, newdata = NULL, predict = T)
weibull_predicted_prob <- pam.surverg_restricted(fit.weibull, covariates, tau = 1e10, newdata = NULL, predict = T)
exp_predicted_prob
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
pam.predicted_survial_eval(event_time = coxph_predicted_prob$obs, risk_scores, status = coxph_predicted_prob$status,
metrics = "all", t_star = NULL, tau = NULL)
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
pam.predicted_survial_eval(event_time = coxph_predicted_prob$obs, predicted_probability = risk_scores, status = coxph_predicted_prob$status,
metrics = "all", t_star = NULL, tau = NULL)
risk_scores <- predict(fit.coxph.full, type = "lp")
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
pam.predicted_survial_eval(event_time = coxph_predicted_prob$obs, predicted_probability = risk_scores, status = coxph_predicted_prob$status,
metrics = "all", t_star = NULL, tau = NULL)
risk_scores <- predict(fit.coxph.full, type = "lp")
risk_scores
# Get survival probabilities at specific time point (tau)
surv_probs <- summary(survfit(fit.coxph.full), times = tau)$surv
# Get survival probabilities at specific time point (tau)
surv_probs <- summary(survfit(fit.coxph.full), times = tau)$surv
surv_probs
# 1. Choose evaluation time (e.g., median follow-up)
tau <- median(train_data$time[train_data$status == 1])
# 2. Get predicted survival probabilities at tau
surv_probs <- survfit(fit.coxph.full, newdata = train_data)$surv
predicted_probs <- 1 - summary(surv_probs, times = tau)$surv
coxph_predicted_prob <- pam.coxph_restricted(fit.coxph.full, covariates, tau = 1e10, newdata = NULL, predict = T)
pam.predicted_survial_eval(event_time = coxph_predicted_prob$obs, predicted_probability = risk_scores, status = coxph_predicted_prob$status,
metrics = c("Pseudo_R_square", "R_square", "L_square"), t_star = NULL, tau = NULL)
