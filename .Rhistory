log_bili + log_protime + edema,
data = training_data, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="weibull", x=TRUE, y=TRUE)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
## Common survival model
## Check predicted value by different model; R_sph, R_sh, C_statistics, Brier Score, Time Dependent Auc
results_all <- pam.metrics_summary(data = training_data, time_var = time_var, status_var = status_var, covariates = covariates,
metrics = "all", newdata = test_data)
# Print the results
print(results_all)
# Test inputs
predicted_data <- c(5.0, 4.2, 7.8, 2.5)
survival_time <- c(6.0, 5.5, 9.0, 3.0)
status <- c(1, 1, 0, 1)
tau <- 8
# Call the function
result1 <- pam.r2.metrics(predicted_data, survival_time, status, tau)
# Print the results
print(result1)
result2 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "R_square", status, tau)
cat("R_square: ", result2$Value, "\n")
result3 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "L_square", status, tau)
cat("L_square: ",  result3$Value , "\n")
result4 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "Pesudo_R", status, tau)
cat("Pseudo_R_square: ", result4$Value, "\n")
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
# Run the function
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
# Output the results
print(rsph_result)
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
# Run the function
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
# Output the results
print(rsph_result$Re)
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data, survival_time, start_time = start_time, status = status)
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, start_time = start_time, status = status)
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2$Re)
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2)
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2$Value)
devtools::document()
.rs.restartR()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
data_directory <- "~/Desktop/Research/Survival Analysis/"
source(paste0(data_directory, "pam.survreg.update.R"))
data(pbc)
pbc <- pbc %>%
filter(is.na(trt)==F) %>%
mutate(log_albumin = log(albumin),
log_bili = log(bili),
log_protime = log(protime),
status = ifelse(status==2, 1, 0))
# Set seed for reproducibility
set.seed(123)
# Create training and validation indices
training_indices <- sample(seq_len(nrow(pbc)), size = 0.8 * nrow(pbc))
# Split the data
test_data <- pbc[-training_indices, ]
training_data <- pbc[training_indices, ] # Training data
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="weibull", x=TRUE, y=TRUE)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
## Common survival model
## Check predicted value by different model; R_sph, R_sh, C_statistics, Brier Score, Time Dependent Auc
results_all <- pam.metrics_summary(data = training_data, time_var = time_var, status_var = status_var, covariates = covariates,
metrics = "all", newdata = test_data)
# Print the results
print(results_all)
# Test inputs
predicted_data <- c(5.0, 4.2, 7.8, 2.5)
survival_time <- c(6.0, 5.5, 9.0, 3.0)
status <- c(1, 1, 0, 1)
tau <- 8
# Call the function
result1 <- pam.r2.metrics(predicted_data, survival_time, status, tau)
# Print the results
print(result1)
result2 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "R_square", status, tau)
cat("R_square: ", result2$Value, "\n")
result3 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "L_square", status, tau)
cat("L_square: ",  result3$Value , "\n")
result4 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "Pesudo_R", status, tau)
cat("Pseudo_R_square: ", result4$Value, "\n")
# Test input data
taulist <- max(test_data$time)
predicted_aft <- restricted_pa_aft(fit.exp, 1e10, y.input = pbc$time, predict = T)
r_data <- restricted_data_gen(predicted_aft$obs, predicted_aft$status, taulist)
c_index_harrells <- compute_cindex(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C: ", c_index_harrells, "\n")
c_index_harrells2 <- pam.concordance.metric(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C_2: ", c_index_harrells, "\n")
c_index_uno <- compute_cindex(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "U_tau",
input_tau = taulist)
cat("Uno C: ", c_index_uno, "\n")
c_index_uno2 <- pam.concordance.metric(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "U_tau",
input_tau = taulist)
cat("Uno C_2: ", c_index_uno2, "\n")
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2$Value)
# Example data
predicted_data <- c(0.8, 0.6, 0.4, 0.2)
survival_time <- c(5, 8, 3, 10)
status <- c(1, 0, 1, 1)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re, "\n")
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2$Value)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", status = status)
print(rsph_result2)
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
# Run the function
rsh_result <- pam.rsh.metric(predicted_data = predicted_data, survival_time = survival_time, status = status)
# Print the results
print(rsh_result$Dx)
rsh_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sh", status = status)
print(rsh_result2)
survival_time <- Surv(c(2, 3, 5, 8, 10), c(1, 0, 1, 0, 1))
predicted_data <- c(0.8, 0.6, 0.7, 0.4, 0.9)
t_star <- 6
brier_score <- pam.Brier.metric(predicted_data, survival_time, t_star)
cat("Brier Score at time", t_star, ":", brier_score, "\n")
brier_score2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "Brier Score", t_star = t_star)
cat("Brier Score 2 at time", t_star, ":", brier_score2$Value, "\n")
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re, "\n")
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2$Value)
survival_time <- Surv(c(2, 3, 5, 8, 10), c(1, 0, 1, 0, 1))
predicted_data <- c(0.8, 0.6, 0.7, 0.4, 0.9)
t_star <- 6
brier_score <- pam.Brier.metric(predicted_data, survival_time, t_star)
cat("Brier Score at time", t_star, ":", brier_score, "\n")
brier_score2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "Brier Score", t_star = t_star)
cat("Brier Score 2 at time", t_star, ":", brier_score2$Value, "\n")
predicted_probs_auc = predict(fit.exp, newdata=test_data, type = "lp")
auc <- pam.survivalROC(Stime = test_data$time,
status = test_data$status,
marker = - predicted_probs_auc,
predict.time = quantile(test_data$time, 0.5),
method="KM")$AUC
cat("AUC:", auc, "\n")
auc2 <- pam.metrics_summary_predicted(predicted_data = predicted_probs_auc, survival_time = test_data, metric = "Time Dependent Auc", status = test_data$status)
cat("AUC2:", auc2$Value, "\n")
# Test input data
taulist <- max(test_data$time)
predicted_aft <- restricted_pa_aft(fit.exp, 1e10, y.input = pbc$time, predict = T)
r_data <- restricted_data_gen(predicted_aft$obs, predicted_aft$status, taulist)
c_index_harrells <- compute_cindex(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C: ", c_index_harrells, "\n")
c_index_harrells2 <- pam.concordance.metric(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C_2: ", c_index_harrells2, "\n")
c_index_harrells3 <- pam.metrics_summary_predicted(predicted_data = predicted_aft$pred,
survival_time = r_data$time,
metric = "Harrell’s C",
status = r_data$status)
cat("Harrell's C_3: ", c_index_harrells3, "\n")
# Test input data
taulist <- max(test_data$time)
predicted_aft <- restricted_pa_aft(fit.exp, 1e10, y.input = pbc$time, predict = T)
r_data <- restricted_data_gen(predicted_aft$obs, predicted_aft$status, taulist)
c_index_harrells <- compute_cindex(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C: ", c_index_harrells, "\n")
c_index_harrells2 <- pam.concordance.metric(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C_2: ", c_index_harrells2, "\n")
c_index_harrells3 <- pam.metrics_summary_predicted(predicted_data = predicted_aft$pred,
survival_time = r_data$time,
metric = "Harrell’s C",
status = r_data$status)
cat("Harrell's C_3: ", c_index_harrells3$Value, "\n")
c_index_uno <- compute_cindex(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "U_tau",
input_tau = taulist)
cat("Uno C: ", c_index_uno, "\n")
c_index_uno2 <- pam.concordance.metric(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "U_tau",
input_tau = taulist)
cat("Uno C_2: ", c_index_uno2, "\n")
# Test input data
taulist <- max(test_data$time)
predicted_aft <- restricted_pa_aft(fit.exp, 1e10, y.input = pbc$time, predict = T)
r_data <- restricted_data_gen(predicted_aft$obs, predicted_aft$status, taulist)
c_index_harrells <- compute_cindex(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C: ", c_index_harrells, "\n")
c_index_harrells2 <- pam.concordance.metric(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "H")
cat("Harrell's C_2: ", c_index_harrells2, "\n")
c_index_harrells3 <- pam.metrics_summary_predicted(predicted_data = predicted_aft$pred,
survival_time = r_data$time,
metric = "Harrell’s C",
status = r_data$status)
cat("Harrell's C_3: ", c_index_harrells3$Value, "\n")
c_index_uno <- compute_cindex(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "U_tau",
input_tau = taulist)
cat("Uno C: ", c_index_uno, "\n")
c_index_uno2 <- pam.concordance.metric(predicted_aft$pred,
r_data$time,
r_data$status,
weight = "U_tau",
input_tau = taulist)
cat("Uno C_2: ", c_index_uno2, "\n")
c_index_uno3 <- pam.metrics_summary_predicted(predicted_data = predicted_aft$pred,
survival_time = r_data$time,
metric = "Uno’s C",
status = r_data$status)
cat("Uno C_2: ", c_index_uno3$Value, "\n")
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph.metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re, "\n")
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2$Value)
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", status = status)
print(rsph_result2)
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
# Run the function
rsh_result <- pam.rsh.metric(predicted_data = predicted_data, survival_time = survival_time, status = status)
# Print the results
print(rsh_result$Dx)
rsh_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sh", status = status)
print(rsh_result2)
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
# Run the function
rsh_result <- pam.rsh.metric(predicted_data = predicted_data, survival_time = survival_time, status = status)
# Print the results
cat("rsh", rsh_result$Dx, "\n")
rsh_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sh", status = status)
cat("rsh2", rsh_result2)
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
# Run the function
rsh_result <- pam.rsh.metric(predicted_data = predicted_data, survival_time = survival_time, status = status)
# Print the results
cat("rsh", rsh_result$Dx, "\n")
rsh_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sh", status = status)
cat("rsh2", rsh_result2$Value)
survival_time <- Surv(c(2, 3, 5, 8, 10), c(1, 0, 1, 0, 1))
predicted_data <- c(0.8, 0.6, 0.7, 0.4, 0.9)
t_star <- 6
brier_score <- pam.Brier.metric(predicted_data, survival_time, t_star)
cat("Brier Score at time", t_star, ":", brier_score, "\n")
brier_score2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "Brier Score", t_star = t_star)
cat("Brier Score 2 at time", t_star, ":", brier_score2$Value, "\n")
predicted_probs_auc = predict(fit.exp, newdata=test_data, type = "lp")
auc <- pam.survivalROC(Stime = test_data$time,
status = test_data$status,
marker = - predicted_probs_auc,
predict.time = quantile(test_data$time, 0.5),
method="KM")$AUC
cat("AUC:", auc, "\n")
auc2 <- pam.metrics_summary_predicted(predicted_data = predicted_probs_auc, survival_time = test_data, metric = "Time Dependent Auc", status = test_data$status)
cat("AUC2:", auc2$Value, "\n")
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
y <- c(6,7,5,4,6,7,5,5,6,4)
n <- length(y)
# Hyperparameters for priors (Beta distribution)
mu_0 <- 5
tau_square <- 4
alpha <- 2
beta <- 3
n_iter <- 1000
# Objects to hold results
mu_sample <- numeric(n_iter)
sigma_sample <- numeric(n_iter)
# Start value
mu_sample[1] <- mean(y)
sigma_sample[1] <- var(y)
for (i in 2:n_iter){
mu_n <- (sum(y) / sigma_sample[i-1] + mu_0 / tau_square) / (n / sigma_sample[i-1] + 1 / tau_square)
var_n <- 1 / (n / sigma_sample[i-1] + 1 / tau_square)
mu_sample[i] <- rnorm(1, mean = mu_n, sd = sqrt(var_n))
alpha_n <- alpha + n / 2
beta_n <- beta + 0.5 * sum((y - mu_sample[i]^2)
sigma_sample[i] <- rbeta(1, shape = alpha_n, rate = beta_n)
set.seed(123)
y <- c(6,7,5,4,6,7,5,5,6,4)
n <- length(y)
# Hyperparameters for priors (Beta distribution)
mu_0 <- 5
tau_square <- 4
alpha <- 2
beta <- 3
n_iter <- 1000
# Objects to hold results
mu_sample <- numeric(n_iter)
sigma_sample <- numeric(n_iter)
# Start value
mu_sample[1] <- mean(y)
sigma_sample[1] <- var(y)
for (i in 2:n_iter){
mu_n <- (sum(y) / sigma_sample[i-1] + mu_0 / tau_square) / (n / sigma_sample[i-1] + 1 / tau_square)
var_n <- 1 / (n / sigma_sample[i-1] + 1 / tau_square)
mu_sample[i] <- rnorm(1, mean = mu_n, sd = sqrt(var_n))
alpha_n <- alpha + n / 2
beta_n <- beta + 0.5 * sum((y - mu_sample[i])^2)
sigma_sample[i] <- rbeta(1, shape = alpha_n, rate = beta_n)
}
set.seed(123)
y <- c(6,7,5,4,6,7,5,5,6,4)
n <- length(y)
# Hyperparameters for priors (Beta distribution)
mu_0 <- 5
tau_square <- 4
alpha <- 2
beta <- 3
n_iter <- 1000
# Objects to hold results
mu_sample <- numeric(n_iter)
sigma_sample <- numeric(n_iter)
# Start value
mu_sample[1] <- mean(y)
sigma_sample[1] <- var(y)
for (i in 2:n_iter){
mu_n <- (sum(y) / sigma_sample[i-1] + mu_0 / tau_square) / (n / sigma_sample[i-1] + 1 / tau_square)
var_n <- 1 / (n / sigma_sample[i-1] + 1 / tau_square)
mu_sample[i] <- rnorm(1, mean = mu_n, sd = sqrt(var_n))
alpha_n <- alpha + n / 2
beta_n <- beta + 0.5 * sum((y - mu_sample[i])^2)
sigma_sample[i] <-1 / rgamma(1, shape = alpha_n, rate = beta_n)
}
set.seed(123)
y <- c(6,7,5,4,6,7,5,5,6,4)
n <- length(y)
# Hyperparameters for priors (Beta distribution)
mu_0 <- 5
tau_square <- 4
alpha <- 2
beta <- 3
n_iter <- 1000
# Objects to hold results
mu_sample <- numeric(n_iter)
sigma_sample <- numeric(n_iter)
# Start value
mu_sample[1] <- mean(y)
sigma_sample[1] <- var(y)
for (i in 2:n_iter){
mu_n <- (sum(y) / sigma_sample[i-1] + mu_0 / tau_square) / (n / sigma_sample[i-1] + 1 / tau_square)
var_n <- 1 / (n / sigma_sample[i-1] + 1 / tau_square)
mu_sample[i] <- rnorm(1, mean = mu_n, sd = sqrt(var_n))
alpha_n <- alpha + n / 2
beta_n <- beta + 0.5 * sum((y - mu_sample[i])^2)
sigma_sample[i] <-1 / rgamma(1, shape = alpha_n, rate = beta_n)
}
burn_in <- 10
mu_samples <- mu_sample[(burn_in + 1):n_iter]
sigma_samples <- sigma_sample[(burn_in + 1):n_iter]
# Results
cat("Posterior estimate for mean:", mean(mu_samples))
# Results
cat("Posterior estimate for mean:", round(mean(mu_samples),2))
set.seed(123)
y <- c(6,7,5,4,6,7,5,5,6,4)
n <- length(y)
# Hyperparameters for priors (Beta distribution)
mu_0 <- 5
tau_square <- 4
alpha <- 2
beta <- 3
n_iter <- 1000
# Objects to hold results
mu_sample <- numeric(n_iter)
sigma_sample <- numeric(n_iter)
# Start value
mu_sample[1] <- mean(y)
sigma_sample[1] <- var(y)
for (i in 2:n_iter){
mu_n <- (sum(y) / sigma_sample[i-1] + mu_0 / tau_square) / (n / sigma_sample[i-1] + 1 / tau_square)
var_n <- 1 / (n / sigma_sample[i-1] + 1 / tau_square)
# Draw new mu
mu_sample[i] <- rnorm(1, mean = mu_n, sd = sqrt(var_n))
alpha_n <- alpha + n / 2
beta_n <- beta + 0.5 * sum((y - mu_sample[i])^2)
# Draw new sigma from inverse-gamma(alpha + prior, beta + prior)
sigma_sample[i] <-1 / rgamma(1, shape = alpha_n, rate = beta_n)
}
burn_in <- 10
mu_samples <- mu_sample[(burn_in + 1):n_iter]
sigma_samples <- sigma_sample[(burn_in + 1):n_iter]
# Results
cat("Posterior estimate for mean:", round(mean(mu_samples),2))
