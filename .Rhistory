delta_0 <- 3
delta <- delta_A - delta_0
sigma_sqrt <- 15^2
alpha <-0.025
power <- 0.8
z_a <- 1.96
z_b <- 0.84
N <- 2 * (z_a + z_b)^2 *(sigma_sqrt + sigma_sqrt)/delta^2
N
n1 <- ttest.2samp(
n1 = NULL,
delta = 2,
sd1 = 15,
power = 0.8,
alpha = 0.025,
sides = 1,
)
N_software <- n1 * 2
N_software
knitr::opts_chunk$set(echo = TRUE)
#clears the environment by removing all existing objects.
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
library(pec)
setwd("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
devtools::document()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
knitr::opts_chunk$set(echo = TRUE)
#clears the environment by removing all existing objects.
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
library(pec)
# Use Mayo Clinic Primary Biliary Cirrhosis Data
data(pbc)
pbc <- pbc %>%
filter(is.na(trt)==F) %>%
mutate(log_albumin = log(albumin),
log_bili = log(bili),
log_protime = log(protime),
status = ifelse(status==2, 1, 0))
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE, y=TRUE)
c_H <- c(pam.concordance(fit.coxph.full)$concordance,
pam.concordance(fit.exp)$concordance,
pam.concordance(fit.lognormal)$concordance,
pam.concordance(fit.weibull)$concordance)
c_U <- c(pam.concordance(fit.coxph.full, timewt="n/G2")$concordance,
pam.concordance(fit.exp, timewt="n/G2")$concordance,
pam.concordance(fit.lognormal, timewt="n/G2")$concordance,
pam.concordance(fit.weibull, timewt="n/G2")$concordance)
r_sph <- c(pam.rsph(fit.coxph.full)$Re,
pam.rsph(fit.exp)$Re,
pam.rsph(fit.lognormal)$Re,
pam.rsph(fit.weibull)$Re)
train.fit.full  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
train.fit.exp  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE,y=TRUE)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
r_sh <- c(pam.schemper(train.fit.full, pbc, pbc)$Dx,
pam.schemper(train.fit.exp, pbc, pbc)$Dx,
pam.schemper(train.fit.lognormal, pbc, pbc)$Dx,
pam.schemper(train.fit.weibull, pbc, pbc)$Dx)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
#taulist <- seq(0, max(pbc$time), 300)
median_time <- median(pbc$time)
brier_score <- c(
pam.Brier(fit.coxph.full, pbc, median_time),
pam.Brier(fit.exp, pbc, median_time),
pam.Brier(fit.lognormal, pbc, median_time),
pam.Brier(fit.weibull, pbc, median_time)
)
time_dep_auc_full <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = predict(fit.coxph.full, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc_exp <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = - predict(fit.exp, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc_log <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = - predict(fit.lognormal, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc_weibull <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = - predict(fit.weibull, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc <- c(
time_dep_auc_full,
time_dep_auc_exp,
time_dep_auc_log,
time_dep_auc_weibull
)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
results_temp <- pam.model_performance_summary(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates, model = c("lognormal", "weibull"))
# Print the results
print(results_temp)
# Call the function with all metrics and all models
results_all <- pam.model_performance_summary(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates)
# Print the results
print(results_all)
devtools::document()
.rs.restartR()
devtools::document()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")、
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
knitr::opts_chunk$set(echo = TRUE)
#clears the environment by removing all existing objects.
.rs.restartR()
knitr::opts_chunk$set(echo = TRUE)
#clears the environment by removing all existing objects.
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
library(pec)
# Use Mayo Clinic Primary Biliary Cirrhosis Data
data(pbc)
pbc <- pbc %>%
filter(is.na(trt)==F) %>%
mutate(log_albumin = log(albumin),
log_bili = log(bili),
log_protime = log(protime),
status = ifelse(status==2, 1, 0))
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE, y=TRUE)
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE, y=TRUE)
c_H <- c(pam.concordance(fit.coxph.full)$concordance,
pam.concordance(fit.exp)$concordance,
pam.concordance(fit.lognormal)$concordance,
pam.concordance(fit.weibull)$concordance)
c_U <- c(pam.concordance(fit.coxph.full, timewt="n/G2")$concordance,
pam.concordance(fit.exp, timewt="n/G2")$concordance,
pam.concordance(fit.lognormal, timewt="n/G2")$concordance,
pam.concordance(fit.weibull, timewt="n/G2")$concordance)
r_sph <- c(pam.rsph(fit.coxph.full)$Re,
pam.rsph(fit.exp)$Re,
pam.rsph(fit.lognormal)$Re,
pam.rsph(fit.weibull)$Re)
train.fit.full  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
train.fit.exp  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE,y=TRUE)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
r_sh <- c(pam.schemper(train.fit.full, pbc, pbc)$Dx,
pam.schemper(train.fit.exp, pbc, pbc)$Dx,
pam.schemper(train.fit.lognormal, pbc, pbc)$Dx,
pam.schemper(train.fit.weibull, pbc, pbc)$Dx)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
#taulist <- seq(0, max(pbc$time), 300)
median_time <- median(pbc$time)
brier_score <- c(
pam.Brier(fit.coxph.full, pbc, median_time),
pam.Brier(fit.exp, pbc, median_time),
pam.Brier(fit.lognormal, pbc, median_time),
pam.Brier(fit.weibull, pbc, median_time)
)
time_dep_auc_full <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = predict(fit.coxph.full, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc_exp <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = - predict(fit.exp, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc_log <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = - predict(fit.lognormal, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc_weibull <- pam.survivalROC(Stime = pbc$time,
status = pbc$status,
marker = - predict(fit.weibull, newdata=pbc, type = "lp") ,
predict.time = quantile(pbc$time, 0.5),
method="KM")$AUC
time_dep_auc <- c(
time_dep_auc_full,
time_dep_auc_exp,
time_dep_auc_log,
time_dep_auc_weibull
)
coxph.out <- pam.coxph(fit.coxph.full)%>%
Reduce("c",.) %>% as.numeric()
exp.out <- pam.survreg(fit.exp)%>%
Reduce("c",.) %>% as.numeric()
lognormal.out <- pam.survreg(fit.lognormal)%>%
Reduce("c",.) %>% as.numeric()
weibull.out <- pam.survreg(fit.weibull)%>%
Reduce("c",.) %>% as.numeric()
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
results_temp <- pam.performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates, model = c("lognormal", "weibull"))
# Print the results
print(results_temp)
# Call the function with all metrics and all models
results_all <- pam.performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates)
# Print the results
print(results_all)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
data_directory <- "~/Desktop/Research/Survival Analysis/"
source(paste0(data_directory, "pam.survreg.update.R"))
data(pbc)
pbc <- pbc %>%
filter(is.na(trt)==F) %>%
mutate(log_albumin = log(albumin),
log_bili = log(bili),
log_protime = log(protime),
status = ifelse(status==2, 1, 0))
# Set seed for reproducibility
set.seed(123)
# Create training and validation indices
training_indices <- sample(seq_len(nrow(pbc)), size = 0.8 * nrow(pbc))
# Split the data
test_data <- pbc[-training_indices, ]
training_data <- pbc[training_indices, ] # Training data
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="weibull", x=TRUE, y=TRUE)
library(pec)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
## Common survival model
## Check predicted value by different model; R_sph, R_sh, C_statistics, Brier Score, Time Dependent Auc
results_all <- pam.metrics_summary(data = training_data, time_var = time_var, status_var = status_var, covariates = covariates,
metrics = "all", newdata = test_data)
library(pec)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
## Common survival model
## Check predicted value by different model; R_sph, R_sh, C_statistics, Brier Score, Time Dependent Auc
results_all <- pam.metrics_summary_predicted(data = training_data, time_var = time_var, status_var = status_var, covariates = covariates,
metrics = "all", newdata = test_data)
library(pec)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
## Common survival model
## Check predicted value by different model; R_sph, R_sh, C_statistics, Brier Score, Time Dependent Auc
results_all <- pam.performance_metrics(data = training_data, time_var = time_var, status_var = status_var, covariates = covariates,
metrics = "all", newdata = test_data)
# Print the results
print(results_all)
# Test inputs
predicted_data <- c(5.0, 4.2, 7.8, 2.5)
survival_time <- c(6.0, 5.5, 9.0, 3.0)
status <- c(1, 1, 0, 1)
tau <- 8
# Call the function
result1 <- pam.r2.metrics(predicted_data, survival_time, status, tau)
# Print the results
print(result1)
# Combine them, metric = Pesudo_R,return all,
result2 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "R_square", status, tau)
cat("R_square: ", result2$Value, "\n")
result3 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "L_square", status, tau)
cat("L_square: ",  result3$Value , "\n")
result4 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "Pesudo_R", status, tau)
cat("Pseudo_R_square: ", result4$Value, "\n")
# Test input data
taulist <- max(test_data$time)
predicted_aft <- restricted_pa_aft(fit.exp, 1e10,
y.input = pbc$time, predict=T)
# Test input data
taulist <- max(test_data$time)
predicted_aft <- restricted_pa_aft(fit.exp, 1e10,
y.input = pbc$time, predict=T)
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph_metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re, "\n")
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
devtools::document()
devtools::document()
.rs.restartR()
devtools::document()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
.rs.restartR()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
data_directory <- "~/Desktop/Research/Survival Analysis/"
source(paste0(data_directory, "pam.survreg.update.R"))
data(pbc)
pbc <- pbc %>%
filter(is.na(trt)==F) %>%
mutate(log_albumin = log(albumin),
log_bili = log(bili),
log_protime = log(protime),
status = ifelse(status==2, 1, 0))
# Set seed for reproducibility
set.seed(123)
# Create training and validation indices
training_indices <- sample(seq_len(nrow(pbc)), size = 0.8 * nrow(pbc))
# Split the data
test_data <- pbc[-training_indices, ]
training_data <- pbc[training_indices, ] # Training data
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = training_data, dist="weibull", x=TRUE, y=TRUE)
library(pec)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
## Common survival model
## Check predicted value by different model; R_sph, R_sh, C_statistics, Brier Score, Time Dependent Auc
results_all <- pam.performance_metrics(data = training_data, time_var = time_var, status_var = status_var, covariates = covariates,
metrics = "all", newdata = test_data)
# Print the results
print(results_all)
# Test inputs
predicted_data <- c(5.0, 4.2, 7.8, 2.5)
survival_time <- c(6.0, 5.5, 9.0, 3.0)
status <- c(1, 1, 0, 1)
tau <- 8
# Call the function
result1 <- pam.r2.metrics(predicted_data, survival_time, status, tau)
# Test inputs
predicted_data <- c(5.0, 4.2, 7.8, 2.5)
survival_time <- c(6.0, 5.5, 9.0, 3.0)
status <- c(1, 1, 0, 1)
tau <- 8
# Call the function
result1 <- pam.r2_metrics(predicted_data, survival_time, status, tau)
# Print the results
print(result1)
# Combine them, metric = Pesudo_R,return all,
result2 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "R_square", status, tau)
cat("R_square: ", result2$Value, "\n")
result3 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "L_square", status, tau)
cat("L_square: ",  result3$Value , "\n")
result4 <- pam.metrics_summary_predicted(predicted_data, survival_time, metric = "Pesudo_R", status, tau)
cat("Pseudo_R_square: ", result4$Value, "\n")
# Test input data
taulist <- max(test_data$time)
predicted_aft <- restricted_pa_aft(fit.exp, 1e10,
y.input = pbc$time, predict=T)
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
start_time <- rep(0, length(survival_time))
rsph_result <- pam.rsph_metric(predicted_data, survival_time, start_time = start_time, status = status)
cat("rsph", rsph_result$Re, "\n")
rsph_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sph", start_time = start_time, status = status)
cat("rsph2", rsph_result2$Value)
library(survival)
# Load the 'lung' dataset
data("lung", package = "survival")
# Prepare input variables
predicted_data <- lung$ph.ecog       # ECOG performance score as the predictor
survival_time <- lung$time          # Observed survival times
status <- lung$status - 1           # Event status (convert to 0 = censored, 1 = event)
# Ensure there are no missing values
complete_cases <- complete.cases(predicted_data, survival_time, status)
predicted_data <- predicted_data[complete_cases]
survival_time <- survival_time[complete_cases]
status <- status[complete_cases]
# Compute the RE measure
result <- pam.rsph.metric(predicted_data, survival_time, status)
library(survival)
# Load the 'lung' dataset
data("lung", package = "survival")
# Prepare input variables
predicted_data <- lung$ph.ecog       # ECOG performance score as the predictor
survival_time <- lung$time          # Observed survival times
status <- lung$status - 1           # Event status (convert to 0 = censored, 1 = event)
# Ensure there are no missing values
complete_cases <- complete.cases(predicted_data, survival_time, status)
predicted_data <- predicted_data[complete_cases]
survival_time <- survival_time[complete_cases]
status <- status[complete_cases]
# Compute the RE measure
result <- pam.rsph_metric(predicted_data, survival_time, status)
# Display the results
cat("RE Measure:", result$Re, "\n")
cat("Numerator:", result$numerator, "\n")
cat("Denominator:", result$denominator, "\n")
# Example data
predicted_data <- c(0.8, 1.2, 0.5, 1.8, 1.0)
survival_time <- c(5, 3, 8, 6, 10)
status <- c(1, 1, 0, 1, 0)
# Run the function
rsh_result <- pam.rsh_metric(predicted_data = predicted_data, survival_time = survival_time, status = status)
# Print the results
cat("rsh", rsh_result$Dx, "\n")
rsh_result2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "R_sh", status = status)
cat("rsh2", rsh_result2$Value)
survival_time <- Surv(c(2, 3, 5, 8, 10), c(1, 0, 1, 0, 1))
predicted_data <- c(0.8, 0.6, 0.7, 0.4, 0.9)
t_star <- 6
brier_score <- pam.Brier_metric(predicted_data, survival_time, t_star)
cat("Brier Score at time", t_star, ":", brier_score, "\n")
brier_score2 <- pam.metrics_summary_predicted(predicted_data = predicted_data, survival_time = survival_time, metric = "Brier Score", t_star = t_star)
cat("Brier Score 2 at time", t_star, ":", brier_score2$Value, "\n")
predicted_probs_auc = predict(fit.exp, newdata=test_data, type = "lp")
auc <- pam.survivalROC(Stime = test_data$time,
status = test_data$status,
marker = - predicted_probs_auc,
predict.time = quantile(test_data$time, 0.5),
method="KM")$AUC
cat("AUC:", auc, "\n")
auc2 <- pam.metrics_summary_predicted(predicted_data = predicted_probs_auc, survival_time = test_data, metric = "Time Dependent Auc", status = test_data$status)
cat("AUC2:", auc2$Value, "\n")
