metrics_results[[fit_name]]$R_sh <- NA
}
}
if ("all" %in% metrics || "Brier Score" %in% metrics) {
median_time <- median(data[[time_var]], na.rm = TRUE)
taulist <- seq(0, max(pbc$time), 300)
metrics_results[[fit_name]]$"Brier Score" <- pam.Brier(fits[[fit_name]], data, median_time)
}
if ("all" %in% metrics || "time_dep_auc" %in% metrics) {
pred_time <- quantile(data[[time_var]], 0.5, na.rm = TRUE)
auc <- pam.survivalROC(Stime = data[[time_var]], status = data[[status_var]], marker = predict(fits[[fit_name]], newdata = data, type = "lp"), predict.time = pred_time, method = "KM")$AUC
auc <- max(auc, 1- auc)
metrics_results[[fit_name]]$time_dep_auc <- auc
}
}
# Format the result as a data frame
metrics_df <- do.call(rbind, lapply(names(metrics_results), function(model) {
# Extract metrics available for this model
model_metrics <- metrics_results[[model]]
# Create a data frame row with Model name and all available metrics
row_data <- c(Model = model, unlist(model_metrics))
# Convert the row to a data frame
as.data.frame(t(row_data), stringsAsFactors = FALSE)
}))
# Convert numeric columns to proper numeric type (they may be character initially)
metrics_df[-1] <- lapply(metrics_df[-1], function(x) round(as.numeric(x), 2))
# Clean up column names
colnames(metrics_df) <- c("Model", metrics)
return(metrics_df)
}
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates, metrics = c("R_square", "L_square", "Brier Score"))
# Print the results
print(results_temp)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull") metrics = c("R_square", "L_square", "Brier Score"))
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull"),  metrics = c("R_square", "L_square", "Brier Score"))
# Print the results
print(results_temp)
devtools::document()
.rs.restartR()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
knitr::opts_chunk$set(echo = TRUE)
#clears the environment by removing all existing objects.
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
# Use Mayo Clinic Primary Biliary Cirrhosis Data
data(pbc)
pbc <- pbc %>%
filter(is.na(trt)==F) %>%
mutate(log_albumin = log(albumin),
log_bili = log(bili),
log_protime = log(protime),
status = ifelse(status==2, 1, 0))
c_H <- c(pam.concordance(fit.coxph.full)$concordance,
pam.concordance(fit.exp)$concordance,
pam.concordance(fit.lognormal)$concordance,
pam.concordance(fit.weibull)$concordance)
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE, y=TRUE)
c_H <- c(pam.concordance(fit.coxph.full)$concordance,
pam.concordance(fit.exp)$concordance,
pam.concordance(fit.lognormal)$concordance,
pam.concordance(fit.weibull)$concordance)
c_U <- c(pam.concordance(fit.coxph.full, timewt="n/G2")$concordance,
pam.concordance(fit.exp, timewt="n/G2")$concordance,
pam.concordance(fit.lognormal, timewt="n/G2")$concordance,
pam.concordance(fit.weibull, timewt="n/G2")$concordance)
r_sph <- c(pam.re(fit.coxph.full)$Re,
pam.re(fit.exp)$Re,
pam.re(fit.lognormal)$Re,
pam.re(fit.weibull)$Re)
train.fit.full  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
train.fit.exp  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE,y=TRUE)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
r_sh <- c(pam.schemper(train.fit.full, pbc, pbc)$Dx,
pam.schemper(train.fit.exp, pbc, pbc)$Dx,
pam.schemper(train.fit.lognormal, pbc, pbc)$Dx,
pam.schemper(train.fit.weibull, pbc, pbc)$Dx)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.lognormal
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, x=TRUE,y=TRUE)
taulist <- seq(0, max(pbc$time), 300)
median_time <- median(pbc$time)
brier_score <- c(
pam.Brier(fit.coxph.full, pbc, median_time),
pam.Brier(fit.exp, pbc, median_time),
pam.Brier(fit.lognormal, pbc, median_time),
pam.Brier(fit.weibull, pbc, median_time)
)
# Specify input variables
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates)
# Specify input variables
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results <- pam.metrics_summary(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates)
# Print the results
print(results)
generate_performance_metrics <- function(data, time_var, status_var, covariates, model = "all", metrics = c("R_square", "L_square", "Pesudo_R", "Harrell’s C", "Uno’s C", "R_sph", "R_sh", "Brier Score", "Time Dependent Auc")) {
# Validate inputs
if (missing(data) || missing(time_var) || missing(status_var) || missing(covariates)) {
stop("Please provide 'data', 'time_var', 'status_var', and 'covariates' arguments.")
}
# Fit models based on user input
fits <- list()
formula <- as.formula(paste("Surv(", time_var, ",", status_var, ") ~ ", paste(covariates, collapse = " + ")))
model_types <- if (("all" %in% model)) c("coxph", "exp", "lognormal", "weibull") else model
# Define a list to hold metrics
metrics_results <- list()
if ("coxph" %in% model_types) {
fits$coxph <- survival::coxph(formula, data = data, x = TRUE, y = TRUE)
}
if ("exp" %in% model_types) {
fits$exp <- survival::survreg(formula, data = data, dist = "exponential", x = TRUE, y = TRUE)
}
if ("lognormal" %in% model_types) {
fits$lognormal <- survival::survreg(formula, data = data, dist = "lognormal", x = TRUE, y = TRUE)
}
if ("weibull" %in% model_types) {
fits$weibull <- survival::survreg(formula, data = data, dist = "weibull", x = TRUE, y = TRUE)
}
for (fit_name in names(fits)) {
metrics_results[[fit_name]] <- list()
if (fit_name == "coxph") {
r_l_list <- pam.coxph(fits[[fit_name]]) %>% Reduce("c", .) %>% as.numeric()
} else {
r_l_list <- pam.survreg(fits[[fit_name]]) %>% Reduce("c", .) %>% as.numeric()
}
# Extract metrics if requested
if ("all" %in% metrics || "R_square" %in% metrics) {
metrics_results[[fit_name]]$R_square <- round(r_l_list[1], 2)
}
if ("all" %in% metrics || "L_square" %in% metrics) {
metrics_results[[fit_name]]$L_square <- round(r_l_list[2], 2)
}
if ("all" %in% metrics || "Pesudo_R" %in% metrics ){
metrics_results[[fit_name]]$Pesudo_R <- round(r_l_list[1] * r_l_list[2], 2)
}
if ("all" %in% metrics || "Harrell’s C" %in% metrics) {
metrics_results[[fit_name]]$"Harrell’s C" <- pam.concordance(fits[[fit_name]])$concordance
}
if ("all" %in% metrics || "Uno’s C" %in% metrics) {
metrics_results[[fit_name]]$"Uno’s C" <- pam.concordance(fits[[fit_name]], timewt="n/G2")$concordance
}
if ("all" %in% metrics || "R_sph" %in% metrics) {
metrics_results[[fit_name]]$R_sph <- pam.re(fits[[fit_name]])$Re
}
if ("all" %in% metrics || "R_sh" %in% metrics) {
if (fit_name == "coxph" ) {
rms_coxph <- rms::cph(formula, data = data, x = TRUE, y = TRUE)
R_sh_coxph <- schemper(rms_coxph, data, data)$Dx
metrics_results[[fit_name]]$R_sh <- R_sh_coxph
} else {
metrics_results[[fit_name]]$R_sh <- NA
}
}
if ("all" %in% metrics || "Brier Score" %in% metrics) {
median_time <- median(data[[time_var]], na.rm = TRUE)
taulist <- seq(0, max(pbc$time), 300)
metrics_results[[fit_name]]$"Brier Score" <- pam.Brier(fits[[fit_name]], data, median_time)
}
if ("all" %in% metrics || "Time Dependent Auc" %in% metrics) {
pred_time <- quantile(data[[time_var]], 0.5, na.rm = TRUE)
auc <- pam.survivalROC(Stime = data[[time_var]], status = data[[status_var]], marker = predict(fits[[fit_name]], newdata = data, type = "lp"), predict.time = pred_time, method = "KM")$AUC
auc <- max(auc, 1- auc)
metrics_results[[fit_name]]$"Time Dependent Auc" <- auc
}
}
# Format the result as a data frame
metrics_df <- do.call(rbind, lapply(names(metrics_results), function(model) {
# Extract metrics available for this model
model_metrics <- metrics_results[[model]]
# Create a data frame row with Model name and all available metrics
row_data <- c(Model = model, unlist(model_metrics))
# Convert the row to a data frame
as.data.frame(t(row_data), stringsAsFactors = FALSE)
}))
# Convert numeric columns to proper numeric type (they may be character initially)
metrics_df[-1] <- lapply(metrics_df[-1], function(x) round(as.numeric(x), 2))
# Clean up column names
colnames(metrics_df) <- c("Model", metrics)
return(metrics_df)
}
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull"))
# Print the results
print(results_temp)
generate_performance_metrics <- function(data, time_var, status_var, covariates, model = "all", metrics = c("R_square", "L_square", "Pesudo_R", "Harrell’s C", "Uno’s C", "R_sph", "R_sh", "Brier Score", "Time Dependent Auc")) {
# Validate inputs
if (missing(data) || missing(time_var) || missing(status_var) || missing(covariates)) {
stop("Please provide 'data', 'time_var', 'status_var', and 'covariates' arguments.")
}
# Fit models based on user input
fits <- list()
formula <- as.formula(paste("Surv(", time_var, ",", status_var, ") ~ ", paste(covariates, collapse = " + ")))
model_types <- if (("all" %in% model)) c("coxph", "exp", "lognormal", "weibull") else model
# Define a list to hold metrics
metrics_results <- list()
if ("coxph" %in% model_types) {
fits$coxph <- survival::coxph(formula, data = data, x = TRUE, y = TRUE)
}
if ("exp" %in% model_types) {
fits$exp <- survival::survreg(formula, data = data, dist = "exponential", x = TRUE, y = TRUE)
}
if ("lognormal" %in% model_types) {
fits$lognormal <- survival::survreg(formula, data = data, dist = "lognormal", x = TRUE, y = TRUE)
}
if ("weibull" %in% model_types) {
fits$weibull <- survival::survreg(formula, data = data, dist = "weibull", x = TRUE, y = TRUE)
}
for (fit_name in names(fits)) {
metrics_results[[fit_name]] <- list()
if (fit_name == "coxph") {
r_l_list <- pam.coxph(fits[[fit_name]]) %>% Reduce("c", .) %>% as.numeric()
} else {
r_l_list <- pam.survreg(fits[[fit_name]]) %>% Reduce("c", .) %>% as.numeric()
}
# Extract metrics if requested
if ("R_square" %in% metrics) {
metrics_results[[fit_name]]$R_square <- round(r_l_list[1], 2)
}
if ("L_square" %in% metrics) {
metrics_results[[fit_name]]$L_square <- round(r_l_list[2], 2)
}
if ( "Pesudo_R" %in% metrics ){
metrics_results[[fit_name]]$Pesudo_R <- round(r_l_list[1] * r_l_list[2], 2)
}
if ("Harrell’s C" %in% metrics) {
metrics_results[[fit_name]]$"Harrell’s C" <- pam.concordance(fits[[fit_name]])$concordance
}
if ("Uno’s C" %in% metrics) {
metrics_results[[fit_name]]$"Uno’s C" <- pam.concordance(fits[[fit_name]], timewt="n/G2")$concordance
}
if ("R_sph" %in% metrics) {
metrics_results[[fit_name]]$R_sph <- pam.re(fits[[fit_name]])$Re
}
if ("R_sh" %in% metrics) {
if (fit_name == "coxph" ) {
rms_coxph <- rms::cph(formula, data = data, x = TRUE, y = TRUE)
R_sh_coxph <- schemper(rms_coxph, data, data)$Dx
metrics_results[[fit_name]]$R_sh <- R_sh_coxph
} else {
metrics_results[[fit_name]]$R_sh <- NA
}
}
if ("Brier Score" %in% metrics) {
median_time <- median(data[[time_var]], na.rm = TRUE)
taulist <- seq(0, max(pbc$time), 300)
metrics_results[[fit_name]]$"Brier Score" <- pam.Brier(fits[[fit_name]], data, median_time)
}
if ("Time Dependent Auc" %in% metrics) {
pred_time <- quantile(data[[time_var]], 0.5, na.rm = TRUE)
auc <- pam.survivalROC(Stime = data[[time_var]], status = data[[status_var]], marker = predict(fits[[fit_name]], newdata = data, type = "lp"), predict.time = pred_time, method = "KM")$AUC
auc <- max(auc, 1- auc)
metrics_results[[fit_name]]$"Time Dependent Auc" <- auc
}
}
# Format the result as a data frame
metrics_df <- do.call(rbind, lapply(names(metrics_results), function(model) {
# Extract metrics available for this model
model_metrics <- metrics_results[[model]]
# Create a data frame row with Model name and all available metrics
row_data <- c(Model = model, unlist(model_metrics))
# Convert the row to a data frame
as.data.frame(t(row_data), stringsAsFactors = FALSE)
}))
# Convert numeric columns to proper numeric type (they may be character initially)
metrics_df[-1] <- lapply(metrics_df[-1], function(x) round(as.numeric(x), 2))
# Clean up column names
colnames(metrics_df) <- c("Model", metrics)
return(metrics_df)
}
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull"))
# Print the results
print(results_temp)
generate_performance_metrics <- function(data, time_var, status_var, covariates, model = "all", metrics = "all") {
# Validate inputs
if (missing(data) || missing(time_var) || missing(status_var) || missing(covariates)) {
stop("Please provide 'data', 'time_var', 'status_var', and 'covariates' arguments.")
}
# Fit models based on user input
fits <- list()
formula <- as.formula(paste("Surv(", time_var, ",", status_var, ") ~ ", paste(covariates, collapse = " + ")))
model_types <- if (("all" %in% model)) c("coxph", "exp", "lognormal", "weibull") else model
metrics <- if (("all" %in% metrics))c("R_square", "L_square", "Pesudo_R", "Harrell’s C", "Uno’s C", "R_sph", "R_sh", "Brier Score", "Time Dependent Auc") else metrics
# Define a list to hold metrics
metrics_results <- list()
if ("coxph" %in% model_types) {
fits$coxph <- survival::coxph(formula, data = data, x = TRUE, y = TRUE)
}
if ("exp" %in% model_types) {
fits$exp <- survival::survreg(formula, data = data, dist = "exponential", x = TRUE, y = TRUE)
}
if ("lognormal" %in% model_types) {
fits$lognormal <- survival::survreg(formula, data = data, dist = "lognormal", x = TRUE, y = TRUE)
}
if ("weibull" %in% model_types) {
fits$weibull <- survival::survreg(formula, data = data, dist = "weibull", x = TRUE, y = TRUE)
}
for (fit_name in names(fits)) {
metrics_results[[fit_name]] <- list()
if (fit_name == "coxph") {
r_l_list <- pam.coxph(fits[[fit_name]]) %>% Reduce("c", .) %>% as.numeric()
} else {
r_l_list <- pam.survreg(fits[[fit_name]]) %>% Reduce("c", .) %>% as.numeric()
}
# Extract metrics if requested
if ("R_square" %in% metrics) {
metrics_results[[fit_name]]$R_square <- round(r_l_list[1], 2)
}
if ("L_square" %in% metrics) {
metrics_results[[fit_name]]$L_square <- round(r_l_list[2], 2)
}
if ( "Pesudo_R" %in% metrics ){
metrics_results[[fit_name]]$Pesudo_R <- round(r_l_list[1] * r_l_list[2], 2)
}
if ("Harrell’s C" %in% metrics) {
metrics_results[[fit_name]]$"Harrell’s C" <- pam.concordance(fits[[fit_name]])$concordance
}
if ("Uno’s C" %in% metrics) {
metrics_results[[fit_name]]$"Uno’s C" <- pam.concordance(fits[[fit_name]], timewt="n/G2")$concordance
}
if ("R_sph" %in% metrics) {
metrics_results[[fit_name]]$R_sph <- pam.re(fits[[fit_name]])$Re
}
if ("R_sh" %in% metrics) {
if (fit_name == "coxph" ) {
rms_coxph <- rms::cph(formula, data = data, x = TRUE, y = TRUE)
R_sh_coxph <- schemper(rms_coxph, data, data)$Dx
metrics_results[[fit_name]]$R_sh <- R_sh_coxph
} else {
metrics_results[[fit_name]]$R_sh <- NA
}
}
if ("Brier Score" %in% metrics) {
median_time <- median(data[[time_var]], na.rm = TRUE)
taulist <- seq(0, max(pbc$time), 300)
metrics_results[[fit_name]]$"Brier Score" <- pam.Brier(fits[[fit_name]], data, median_time)
}
if ("Time Dependent Auc" %in% metrics) {
pred_time <- quantile(data[[time_var]], 0.5, na.rm = TRUE)
auc <- pam.survivalROC(Stime = data[[time_var]], status = data[[status_var]], marker = predict(fits[[fit_name]], newdata = data, type = "lp"), predict.time = pred_time, method = "KM")$AUC
auc <- max(auc, 1- auc)
metrics_results[[fit_name]]$"Time Dependent Auc" <- auc
}
}
# Format the result as a data frame
metrics_df <- do.call(rbind, lapply(names(metrics_results), function(model) {
# Extract metrics available for this model
model_metrics <- metrics_results[[model]]
# Create a data frame row with Model name and all available metrics
row_data <- c(Model = model, unlist(model_metrics))
# Convert the row to a data frame
as.data.frame(t(row_data), stringsAsFactors = FALSE)
}))
# Convert numeric columns to proper numeric type (they may be character initially)
metrics_df[-1] <- lapply(metrics_df[-1], function(x) round(as.numeric(x), 2))
# Clean up column names
colnames(metrics_df) <- c("Model", metrics)
return(metrics_df)
}
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull"))
# Print the results
print(results_temp)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- generate_performance_metrics(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull"), metrics = c("R_square", "L_square"))
# Print the results
print(results_temp)
devtools::document()
.rs.restartR()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
.rs.restartR()
devtools::install("/Users/wanghd/Desktop/Research/Survival Analysis/PAmeasures-master")
knitr::opts_chunk$set(echo = TRUE)
#clears the environment by removing all existing objects.
rm(list = ls())
library(PAmeasures)
library(survival)
library(rms)
library(dplyr)
# Use Mayo Clinic Primary Biliary Cirrhosis Data
data(pbc)
pbc <- pbc %>%
filter(is.na(trt)==F) %>%
mutate(log_albumin = log(albumin),
log_bili = log(bili),
log_protime = log(protime),
status = ifelse(status==2, 1, 0))
# Fit a full Cox PH model
fit.coxph.full <- coxph(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
fit.exp <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE, y=TRUE)
fit.lognormal <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE, y=TRUE)
fit.weibull <- survreg(Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE, y=TRUE)
c_H <- c(pam.concordance(fit.coxph.full)$concordance,
pam.concordance(fit.exp)$concordance,
pam.concordance(fit.lognormal)$concordance,
pam.concordance(fit.weibull)$concordance)
c_U <- c(pam.concordance(fit.coxph.full, timewt="n/G2")$concordance,
pam.concordance(fit.exp, timewt="n/G2")$concordance,
pam.concordance(fit.lognormal, timewt="n/G2")$concordance,
pam.concordance(fit.weibull, timewt="n/G2")$concordance)
r_sph <- c(pam.re(fit.coxph.full)$Re,
pam.re(fit.exp)$Re,
pam.re(fit.lognormal)$Re,
pam.re(fit.weibull)$Re)
train.fit.full  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc,x=TRUE,y=TRUE)
train.fit.exp  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="exponential", x=TRUE,y=TRUE)
train.fit.lognormal  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="lognormal", x=TRUE,y=TRUE)
train.fit.weibull  <- rms::cph(survival::Surv(time, status) ~ age + log_albumin +
log_bili + log_protime + edema,
data = pbc, dist="weibull", x=TRUE,y=TRUE)
r_sh <- c(pam.schemper(train.fit.full, pbc, pbc)$Dx,
pam.schemper(train.fit.exp, pbc, pbc)$Dx,
pam.schemper(train.fit.lognormal, pbc, pbc)$Dx,
pam.schemper(train.fit.weibull, pbc, pbc)$Dx)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
# Call the function with all metrics and all models
results_temp <- pam.metrics_summary(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull"), metrics = c("R_square", "L_square"))
# Print the results
print(results_temp)
time_var <- "time"
status_var <- "status"
covariates <- c("age", "log_albumin", "log_bili", "log_protime", "edema")
results_temp <- pam.metrics_summary(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates,model = c("lognormal", "weibull"), metrics = c("R_square", "L_square"))
# Print the results
print(results_temp)
# Call the function with all metrics and all models
results_all <- pam.metrics_summary(data = pbc, time_var = time_var, status_var = status_var, covariates = covariates)
# Print the results
print(results_all)
