# Calculate variance of each gene across cancer types
gene_variance <- apply(mean_expression_by_type[, -1], 2, var)
# Count genes with variance above a threshold (indicating differences)
threshold <- 0  # Adjust if necessary
differential_genes <- sum(gene_variance > threshold)
# Results
cat("Number of genes with expression variation across cancer types:", differential_genes, "\n")
Explanation:
NCI60$data.head(2)
head(NCI60$data)
head(NCI60$data,1)
View(nsclc_data)
View(renal_data)
View(gene_data)
head(NCI60$data,2)
data_frame <- data.frame(cell_line = cell_line_labels, gene_data)
# Calculate descriptive statistics for each cancer type
mean_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = mean)
sd_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = sd)
min_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = min)
max_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = max)
# Print descriptive analysis for the first 5 genes as an example
cat("Mean gene expression for the first 5 genes across cancer types:\n")
print(mean_stats[, 1:6])
cat("\nStandard deviation of gene expression for the first 5 genes across cancer types:\n")
print(sd_stats[, 1:6])
cat("\nMinimum gene expression for the first 5 genes across cancer types:\n")
print(min_stats[, 1:6])
cat("\nMaximum gene expression for the first 5 genes across cancer types:\n")
print(max_stats[, 1:6])
data_frame <- data.frame(cell_line = cell_line_labels, gene_data)
# Calculate descriptive statistics for each cancer type
mean_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = mean)
sd_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = sd)
min_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = min)
max_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = max)
# Print descriptive analysis for the first 5 genes as an example
cat("Mean gene expression for the first 5 genes across cancer types:\n")
print(mean_stats[, :])
data_frame <- data.frame(cell_line = cell_line_labels, gene_data)
# Calculate descriptive statistics for each cancer type
mean_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = mean)
sd_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = sd)
min_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = min)
max_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = max)
# Print descriptive analysis for the first 5 genes as an example
cat("Mean gene expression for the first 5 genes across cancer types:\n")
print(mean_stats[, ])
data_frame <- data.frame(cell_line = cell_line_labels, gene_data)
# Calculate descriptive statistics for each cancer type
mean_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = mean)
sd_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = sd)
min_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = min)
max_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = max)
# Print descriptive analysis for the first 5 genes as an example
cat("Mean gene expression for the first 5 genes across cancer types:\n")
print(mean_stats[, 1:6])
pr.out=prcomp(nci.data, scale=TRUE)
pr.out=prcomp(NCI60$data, scale=TRUE)
summary(prcomp(NCI60$data, scale=TRUE, rank=5))
pca_result <- prcomp(NCI60$data, scale. = TRUE)
plot(pca_result$x[, 1:2], col = as.factor(NCI60$labs),
pch = 19, main = "PCA of NCI60 Data")
legend("topright", legend = unique(NCI60$labs), col = 1:length(unique(NCI60$labs)), pch = 19)
pca_result <- prcomp(NCI60$data, scale. = TRUE)
plot(pca_result$x[, 1:2], col = as.factor(NCI60$labs),
pch = 19, main = "PCA of NCI60 Data")
legend("topright", legend = unique(NCI60$labs), col = 1:length(unique(NCI60$labs)), pch = 19)
summary(pca_result)
pca_result <- prcomp(NCI60$data, scale. = TRUE)
plot(pca_result$x[, 1:2], col = as.factor(NCI60$labs),
pch = 19, main = "PCA of NCI60 Data")
legend("topright", legend = unique(NCI60$labs), col = 1:length(unique(NCI60$labs)), pch = 19)
summary(prcomp(nci.data, scale=TRUE, rank=5))
pca_result <- prcomp(NCI60$data, scale. = TRUE)
plot(pca_result$x[, 1:2], col = as.factor(NCI60$labs),
pch = 19, main = "PCA of NCI60 Data")
legend("topright", legend = unique(NCI60$labs), col = 1:length(unique(NCI60$labs)), pch = 19)
summary(prcomp(NCI60$data, scale=TRUE, rank=5))
nsclc_indices <- which(NCI60$labs == "NSCLC")
renal_indices <- which(NCI60$labs == "RENAL")
p_values <- apply(NCI60$data, 2, function(gene) {
t.test(gene[nsclc_indices], gene[renal_indices])$p.value
})
significant_genes <- sum(p_values < 0.05)
nsclc_indices <- which(NCI60$labs == "NSCLC")
renal_indices <- which(NCI60$labs == "RENAL")
p_values <- apply(NCI60$data, 2, function(gene) {
t.test(gene[nsclc_indices], gene[renal_indices])$p.value
})
significant_genes <- sum(p_values < 0.05)
significant_genes
library(caret)
!install.packages("caret")
library(caret)
set.seed(123)
train_indices <- sample(1:64, 48)
train_data <- NCI60$data[train_indices, ]
test_data <- NCI60$data[-train_indices, ]
train_labels <- NCI60$labs[train_indices]
test_labels <- NCI60$labs[-train_indices]
model <- train(train_data, as.factor(train_labels), method = "rf")
predictions <- predict(model, test_data)
confusionMatrix(predictions, as.factor(test_labels))
print(mean_stats[, 1:6])
# Calculate the mean gene expression for each cancer cell type
mean_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = mean)
# Transpose the mean gene expression data to make cell lines columns
mean_expression_matrix <- as.data.frame(t(mean_stats[, -1]))
colnames(mean_expression_matrix) <- mean_stats$cell_line
# Compute the correlation matrix between cancer cell types
correlation_matrix <- cor(mean_expression_matrix, use = "pairwise.complete.obs")
# Print the correlation matrix
cat("Correlation matrix between cancer cell types:\n")
print(correlation_matrix)
# Optionally, visualize the correlation matrix using a heatmap
library(ggplot2)
library(reshape2)
correlation_df <- melt(correlation_matrix)
colnames(correlation_df) <- c("Cell_Line_1", "Cell_Line_2", "Correlation")
ggplot(correlation_df, aes(x = Cell_Line_1, y = Cell_Line_2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limit = c(-1, 1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Correlation Matrix Heatmap")
library(ggplot2)
library(reshape2)
data_frame <- data.frame(cell_line = cell_line_labels, gene_data)
# Calculate descriptive statistics for each cancer type
mean_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = mean)
sd_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = sd)
min_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = min)
max_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = max)
# Print descriptive analysis for the first 5 genes as an example
cat("Mean gene expression for the first 5 genes across cancer types:\n")
print(mean_stats[, 1:6])
library(ggplot2)
library(reshape2)
data_frame <- data.frame(cell_line = cell_line_labels, gene_data)
# Calculate descriptive statistics for each cancer type
mean_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = mean)
sd_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = sd)
min_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = min)
max_stats <- aggregate(. ~ cell_line, data = data_frame, FUN = max)
# Print descriptive analysis for the first 5 genes as an example
print(mean_stats[, 1:6])
# Transpose the mean gene expression data to make cell lines columns
mean_expression_matrix <- as.data.frame(t(mean_stats[, -1]))
colnames(mean_expression_matrix) <- mean_stats$cell_line
# Compute the correlation matrix between cancer cell types
correlation_matrix <- cor(mean_expression_matrix, use = "pairwise.complete.obs")
# Print the correlation matrix
cat("Correlation matrix between cancer cell types:\n")
print(correlation_matrix)
correlation_df <- melt(correlation_matrix)
colnames(correlation_df) <- c("Cell_Line_1", "Cell_Line_2", "Correlation")
ggplot(correlation_df, aes(x = Cell_Line_1, y = Cell_Line_2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limit = c(-1, 1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Correlation Matrix Heatmap")
mean_expression_matrix <- as.data.frame(t(mean_stats[, -1]))
colnames(mean_expression_matrix) <- mean_stats$cell_line
# Compute the correlation matrix between cancer cell types
correlation_matrix <- cor(mean_expression_matrix, use = "pairwise.complete.obs")
correlation_df <- melt(correlation_matrix)
colnames(correlation_df) <- c("Cell_Line_1", "Cell_Line_2", "Correlation")
ggplot(correlation_df, aes(x = Cell_Line_1, y = Cell_Line_2, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0,
limit = c(-1, 1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ggtitle("Correlation Matrix Heatmap")
pca_result <- prcomp(NCI60$data, scale. = TRUE)
plot(pca_result$x[, 1:2], col = as.factor(NCI60$labs),
pch = 19, main = "PCA of NCI60 Data")
legend("topright", legend = unique(NCI60$labs), col = 1:length(unique(NCI60$labs)), pch = 19)
summary(prcomp(NCI60$data, scale=TRUE, rank=5))
# Load required library for color palettes
library(RColorBrewer)
# Define a color palette
color_palette <- brewer.pal(n = length(unique(NCI60$labs)), name = "Set3")
# Plot PCA results with the new color palette
plot(pca_result$x[, 1:2],
col = color_palette[as.factor(NCI60$labs)],
pch = 19,
main = "PCA of NCI60 Data",
xlab = "PC1", ylab = "PC2")
# Add a legend with the new colors
legend("topright",
legend = unique(NCI60$labs),
col = color_palette,
pch = 19)
# Load the required library for predefined palettes
library(RColorBrewer)
# Define a custom color palette with enough colors for all unique labels
num_labels <- length(unique(NCI60$labs))
color_palette <- colorRampPalette(brewer.pal(12, "Set3"))(num_labels)
# Plot PCA results with the new color palette
plot(pca_result$x[, 1:2],
col = color_palette[as.factor(NCI60$labs)],
pch = 19,
main = "PCA of NCI60 Data",
xlab = "PC1", ylab = "PC2")
# Add a legend with the new colors
legend("topright",
legend = unique(NCI60$labs),
col = color_palette,
pch = 19,
cex = 0.8)
# Load required libraries
library(RColorBrewer)
library(viridis)
# Define a highly distinguishable color palette
num_labels <- length(unique(NCI60$labs))
# Use the "viridis" color palette for high contrast
color_palette <- viridis(num_labels)
# Plot PCA results with the new color palette
plot(pca_result$x[, 1:2],
col = color_palette[as.factor(NCI60$labs)],
pch = 19,
main = "PCA of NCI60 Data",
xlab = "PC1", ylab = "PC2")
# Add a legend with the new colors
legend("topright",
legend = unique(NCI60$labs),
col = color_palette,
pch = 19,
cex = 0.8)
# Load required libraries
library(RColorBrewer)
library(viridis)
# Load required libraries
library(colorspace)
# Generate a palette with many distinct colors
num_labels <- length(unique(NCI60$labs))
color_palette <- qualitative_hcl(num_labels, palette = "Dynamic")
# Plot PCA results with the new color palette
plot(pca_result$x[, 1:2],
col = color_palette[as.factor(NCI60$labs)],
pch = 19,
main = "PCA of NCI60 Data",
xlab = "PC1", ylab = "PC2")
# Add a legend with the new colors
legend("topright",
legend = unique(NCI60$labs),
col = color_palette,
pch = 19,
cex = 0.8)
# Load required libraries
library(RColorBrewer)
library(viridis)
# Load required libraries
library(colorspace)
# Generate a palette with many distinct colors
num_labels <- length(unique(NCI60$labs))
color_palette <- qualitative_hcl(num_labels, palette = "Dynamic")
# Plot PCA results with the new color palette
plot(pca_result$x[, 1:2],
col = color_palette[as.factor(NCI60$labs)],
pch = 19,
main = "PCA of NCI60 Data",
xlab = "PC1", ylab = "PC2")
# Add a legend with the new colors
legend("topright",
legend = unique(NCI60$labs),
col = color_palette,
pch = 19,
cex = 0.8)
text(pca_result$x[, 1:2],
labels = rownames(pca_result$x),
pos = 4,  # Position the labels slightly to the right of the points
cex = 0.6)  # Adjust the size of the labels
summary(prcomp(NCI60$data, scale=TRUE, rank=5))
library(RColorBrewer)
library(viridis)
library(colorspace)
# Generate a palette with many distinct colors
num_labels <- length(unique(NCI60$labs))
color_palette <- qualitative_hcl(num_labels, palette = "Dynamic")
# Plot PCA results with the new color palette
plot(pca_result$x[, 1:2],
col = color_palette[as.factor(NCI60$labs)],
pch = 19,
main = "PCA of NCI60 Data",
xlab = "PC1", ylab = "PC2")
# Add a legend with the new colors
legend("topright",
legend = unique(NCI60$labs),
col = color_palette,
pch = 19,
cex = 0.8)
text(pca_result$x[, 1:2],
labels = rownames(pca_result$x),
pos = 4,  # Position the labels slightly to the right of the points
cex = 0.6)  # Adjust the size of the labels
nsclc_indices <- which(NCI60$labs == "NSCLC")
renal_indices <- which(NCI60$labs == "RENAL")
p_values <- apply(NCI60$data, 2, function(gene) {
t.test(gene[nsclc_indices], gene[renal_indices])$p.value
})
significant_genes <- sum(p_values < 0.05)
significant_genes
n <- 10
num_simulations <- 1e6
set.seed(123)
sample_means_10 <- replicate(num_simulations, mean(rnorm(n)))
# Plot the distribution
hist(sample_means_10, breaks = 50, probability = TRUE, col = "lightblue",
main = "Distribution of Sample Means (n = 10)", xlab = "Sample Mean")
n <- 100
set.seed(123)
sample_means_10 <- replicate(num_simulations, mean(rnorm(n)))
hist(sample_means_10, breaks = 50, probability = TRUE, col = "lightblue",
main = "Distribution of Sample Means (n = 100)", xlab = "Sample Mean")
n <- 1000
sample_means_1000 <- replicate(num_simulations, mean(rnorm(n)))
hist(sample_means_1000, breaks = 50, probability = TRUE, col = "lightcoral",
main = "Distribution of Sample Means (n = 1000)", xlab = "Sample Mean")
n <- 1000
sample_means_1000 <- replicate(num_simulations, mean(rnorm(n)))
hist(sample_means_1000, breaks = 50, probability = TRUE, col = "lightblue",
main = "Distribution of Sample Means (n = 1000)", xlab = "Sample Mean")
# Set up the plotting area for 1 row and 3 columns
par(mfrow = c(1, 3))
# Parameters
num_simulations <- 1e6  # Number of simulations
# For n = 10
n <- 10
sample_means_10 <- replicate(num_simulations, mean(rnorm(n)))
hist(sample_means_10, breaks = 50, probability = TRUE, col = "lightblue",
main = "n = 10", xlab = "Sample Mean")
# For n = 100
n <- 100
sample_means_100 <- replicate(num_simulations, mean(rnorm(n)))
hist(sample_means_100, breaks = 50, probability = TRUE, col = "lightgreen",
main = "n = 100", xlab = "Sample Mean")
# For n = 1000
n <- 1000
sample_means_1000 <- replicate(num_simulations, mean(rnorm(n)))
hist(sample_means_1000, breaks = 50, probability = TRUE, col = "lightcoral",
main = "n = 1000", xlab = "Sample Mean")
# Reset plotting layout back to 1 plot per row
par(mfrow = c(1, 1))
qqnorm(bwt.nonsmoke)
babies <- read.table("babies.txt", header=TRUE)
babies <- read.table("/Users/wanghd/Desktop/UCLA/Biostat/stat254/babies.txt", header=TRUE)
bwt.nonsmoke <- subset(babies, smoke==0)$bwt
bwt.smoke <- subset(babies, smoke==1)$bwt
dat <- c(smokers, nonsmokers)
qqnorm(bwt.nonsmoke)
qqline(bwt.nonsmoke,col=2)
qqnorm(bwt.smoke)
qqline(bwt.smoke,col=2)
n <- 10
set.seed(1)
nonsmokers <- sample(bwt.nonsmoke , n)
smokers <- sample(bwt.smoke , n)
diff <- mean(smokers) - mean(nonsmokers)
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
diff_star <- mean(smokers_star)-mean(nonsmokers_star)
set.seed(1)
n <- 1000
null_distribution <- numeric(n)
for (i in 1:n){
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
diff_star <- mean(smokers_star)-mean(nonsmokers_star)
null_distribution[i] <- diff_star
}
p_value_mean <- mean(abs(null_distribution) >= abs(obs_diff))
set.seed(1)
n <- 1000
null_distribution <- numeric(n)
for (i in 1:n){
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
diff_star <- mean(smokers_star)-mean(nonsmokers_star)
null_distribution[i] <- diff_star
}
p_value_mean <- mean(abs(null_distribution) >= abs(diff))
p_value_mean
n <- 10
set.seed(1)
nonsmokers <- sample(bwt.nonsmoke , n)
smokers <- sample(bwt.smoke , n)
diff <- mean(smokers) - mean(nonsmokers)
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
diff_star <- mean(smokers_star)-mean(nonsmokers_star)
set.seed(1)
n <- 1000
null_distribution <- numeric(n)
for (i in 1:n){
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
diff_star <- mean(smokers_star)-mean(nonsmokers_star)
null_distribution[i] <- diff_star
}
p_value_mean <- mean(abs(null_distribution) >= abs(diff))
p_value_mean
# Set sample size and seed
n <- 10
set.seed(1)
# Draw random samples
nonsmokers <- sample(bwt.nonsmoke, n)
smokers <- sample(bwt.smoke, n)
# Observed difference in means
obs_diff <- mean(smokers) - mean(nonsmokers)
# Permutation test
B <- 1000  # Number of permutations
null_distribution <- numeric(B)
for (i in 1:B) {
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
null_distribution[i] <- mean(smokers_star) - mean(nonsmokers_star)
}
# Calculate p-value
p_value_mean <- mean(abs(null_distribution) >= abs(obs_diff))
p_value_mean
n <- 10
set.seed(1)
nonsmokers <- sample(bwt.nonsmoke, n)
smokers <- sample(bwt.smoke, n)
# Observed difference in means
obs_diff <- mean(smokers) - mean(nonsmokers)
n_permutation <- 1000
null_distribution <- numeric(n_permutation)
for (i in 1:n_permutation) {
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
null_distribution[i] <- mean(smokers_star) - mean(nonsmokers_star)
}
p_value_mean <- mean(abs(null_distribution) >= abs(obs_diff))
p_value_mean
set.seed(1)
diff_med <- median(smokers) - median(nonsmokers)
n <- 10
nonsmokers <- sample(bwt.nonsmoke, n)
smokers <- sample(bwt.smoke, n)
n_permutation <- 1000
null_distribution <- numeric(n_permutation)
for (i in 1:n_permutation) {
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
null_distribution[i] <- median(smokers_star) - median(nonsmokers_star)
}
p_value_median <- mean(abs(null_distribution) >= abs(obs_diff_med))
set.seed(1)
obs_diff_med <- median(smokers) - median(nonsmokers)
n <- 10
nonsmokers <- sample(bwt.nonsmoke, n)
smokers <- sample(bwt.smoke, n)
n_permutation <- 1000
null_distribution <- numeric(n_permutation)
for (i in 1:n_permutation) {
dat <- c(smokers, nonsmokers)
shuffle <- sample(dat)
smokers_star <- shuffle[1:n]
nonsmokers_star <- shuffle[(n+1):(2*n)]
null_distribution[i] <- median(smokers_star) - median(nonsmokers_star)
}
p_value_median <- mean(abs(null_distribution) >= abs(obs_diff_med))
p_value_median
par(mfrow = c(1, 2))
# Q-Q plot for nonsmokers
qqnorm(bwt.nonsmoke, main = "Q-Q Plot for Non-Smokers")
qqline(bwt.nonsmoke, col = 2)
# Q-Q plot for smokers
qqnorm(bwt.smoke, main = "Q-Q Plot for Smokers")
qqline(bwt.smoke, col = 2)
# Sample size
n <- 10
set.seed(1)
# Draw random samples
nonsmokers <- sample(bwt.nonsmoke, n)
smokers <- sample(bwt.smoke, n)
# Perform two-sample t-test
result <- t.test(nonsmokers, smokers)
t_test_p_value <- result$p.value
# Display the p-value
t_test_p_value
n <- 100
set.seed(1)
nonsmokers <- sample(bwt.nonsmoke, n)
smokers <- sample(bwt.smoke, n)
result <- t.test(nonsmokers, smokers)
t_test_p_value <- result$p.value
t_test_p_value
t.test(bwt.nonsmoke, bwt.smoke)
